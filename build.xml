<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="RoboLibJ" default="build">

  <property file="build.properties"/>

  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${ant-contrib.jar}"/>
    </classpath>
  </taskdef>

  <property name="path.separator" value=":"/>

  <!-- Import enviornment properties and set defaults -->
  <property environment="env"/>
  <condition property="build.num" value="${env.BUILD_NUMBER}" else="LOCAL">
    <isset property="env.BUILD_NUMBER"/>
  </condition>
  <tstamp>
    <format property="build.start" pattern="yyyy-MM-dd_hh-mm-ss" locale="en,US"/>
  </tstamp>
  <condition property="build.id" value="${env.BUILD_ID}" else="${build.start}">
    <isset property="env.BUILD_ID"/>
  </condition>
  <condition property="git.revisiton" value="${env.GIT_REVISION}" else="LOCAL">
    <isset property="env.GIT_REVISION"/>
  </condition>
  <condition property="build.type" value="${env.BUILD_TYPE}" else="DEV-BUILD">
    <isset property="env.BUILD_TYPE"/>
  </condition>

  <target name="build" description="Build the Library" depends="clean,compile,get-release-version,jar"/>

  <target name="compile" description="Compile the source code.">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${class.dir}"/>
    <echo>[${project.name}-compile] ${src.dir}, ${classpath} -> ${class.dir}</echo>
    <javac srcdir="${src.dir}"
      destdir="${class.dir}"
      includeAntRuntime="no"
      includeJavaRuntime="no"
      classpath="${classpath}"
      target="${build.target}"
      source="${build.source}"
      compiler="javac${ant.java.version}"
      debug="true"
      fork="true">
      <compilerarg value="-Xlint:deprecation"/>
    </javac>
    <echo>[${project.name}-compile] COMPLETE</echo>
  </target>

  <target name="javadoc" description="Generate the Javadocs">
    <mkdir dir="${dist.dir.name}"/>
    <mkdir dir="${dist.javadoc.dir}"/>
    <echo>[${project.name}-javadoc] ${src.dir} -> ${dist.javadoc.dir}</echo>
    <javadoc additionalparam=""
      author="true"
      charset="UTF-8"
      destdir="${dist.javadoc.dir}"
      docencoding="UTF-8"
      encoding="UTF-8"
      failonerror="true"
      noindex="false"
      nonavbar="false"
      notree="false"
      private="true"
      source="${src.dir}"
      splitindex="true"
      useexternalfile="false"
      version="true"
      windowtitle="${project.name} - Javadocs">
      <classpath>
          <path path="${classpath}"/>
      </classpath>
      <fileset dir="${src.dir}" excludes="*.java,${excludes}" includes="${includes}">
          <filename name="**/*.java"/>
      </fileset>
    </javadoc>
    <copy todir="${dist.javadoc.dir}">
      <fileset dir="${src.dir}" excludes="${excludes}" includes="${includes}">
          <filename name="**/doc-files/**"/>
      </fileset>
    </copy>
  </target>

  <target name="get-release-version">
    <loadfile property="version.file"
      srcFile="${version.class}">
      <filterchain>
        <striplinebreaks/>
      </filterchain>
    </loadfile>

    <propertyregex property="rel.vers.major"
      input="${version.file}"
      regexp="(MAJOR_VERSION \= )([0-9]*)"
      select="\2"
      casesensitive="false" />

    <propertyregex property="rel.vers.minor"
      input="${version.file}"
      regexp="(MINOR_VERSION \= )([0-9]*)"
      select="\2"
      casesensitive="false" />

    <propertyregex property="rel.vers.patch"
      input="${version.file}"
      regexp="(PATCH_VERSION \= )([0-9]*)"
      select="\2"
      casesensitive="false" />

    <property name="build.version" value="${rel.vers.major}.${rel.vers.minor}.${rel.vers.patch}" />
    <echo>[${project.name}] Version: ${build.version}</echo>
  </target>

  <target name="release">
    <app-release/>
  </target>

  <target name="jar" depends="compile">
    <echo>[${project.name}-jar] ${class.dir}, ${resources.dir} -> ${dist.jar}</echo>

    <condition property="vers" value="${build.version}" else="DEV">
      <isset property="build.version"/>
    </condition>

    <jar destfile="${dist.jar}">
      <manifest>
        <attribute name="Build-Number" value="${build.num}"/>
        <attribute name="Built-On" value="${build.id}"/>
        <attribute name="Built-From" value="v${build.version}"/>
        <attribute name="Build-Type" value="${build.type}"/>
        <attribute name="Build-Target" value="JavaSE jre${build.target}"/>
        <attribute name="Vendor" value="${project.vendor}"/>
      </manifest>
      
      <fileset dir="${class.dir}" >
        <exclude name="**/*.java"/>
      </fileset>
      <fileset dir="${resources.dir}" excludes="CVS/** .svn" />

    </jar>
    <copy todir="${wpilib.lib}">
      <fileset dir="${dist.dir}">
          <filename name="${dist.jar.name}"/>
      </fileset>
    </copy>

    <echo>[${project.name}-jar] COMPLETE! JarFile: ${dist.jar}</echo>
  </target>
  
  <target name="clean" description="Clean the build environment">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${project.dir}/bin"/>
  </target>

  <target name="archive-source">
    <tar destfile="${dist.dir}/${project.name}.src.tar.gz" basedir="${src.dir}" compression="gzip"/>
  </target>

  <target name="archive-project">
    <mkdir dir="${dist.dir.name}"/>
    <tar
      destfile="${dist.dir}/${project.name}.project.tar.gz"
      compression="gzip">
      <tarfileset dir="${project.dir}">
        <exclude name="${dist.dir.name}/**"/>
        <exclude name="${build.dir.name}/**"/>
        <exclude name="${release.dir.name}/**"/>
        <exclude name="${resources.dir.name}/META-INF/**"/>
        <exclude name="*.sublime-*"/>
      </tarfileset>
    </tar>
  </target>
  
</project>