package org.team2583.robolib.hal;

import java.nio.ByteBuffer;

/**
 * JNA Wrapper for library <b>HAL</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class HALLibrary /* implements Library */ {
	//public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("HALAthenaJava", true, HALLibrary.class);
	//public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(HALLibrary.JNA_LIBRARY_NAME, MangledFunctionMapper.DEFAULT_OPTIONS);
	static {
		System.loadLibrary("JNIWrappers");
	//	Native.register(HALLibrary.class, HALLibrary.JNA_NATIVE_LIB);
	}
	/**
	 * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:148</i><br>
	 * enum values
	 */
	public static interface Mode {
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:144</i> */
		public static final int kTwoPulse = 0;
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:145</i> */
		public static final int kSemiperiod = 1;
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:146</i> */
		public static final int kPulseLength = 2;
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:147</i> */
		public static final int kExternalDirection = 3;
	};
	/**
	 * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:235</i><br>
	 * enum values
	 */
	public static interface tSPIConstants {
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:233</i> */
		public static final int kReceiveFIFODepth = 512;
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:234</i> */
		public static final int kTransmitFIFODepth = 512;
	};
	/**
	 * <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:241</i><br>
	 * enum values
	 */
	public static interface tFrameMode {
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:237</i> */
		public static final int kChipSelect = 0;
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:238</i> */
		public static final int kPreLatchPulse = 1;
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:239</i> */
		public static final int kPostLatchPulse = 2;
		/** <i>native declaration : AthenaJava\target\native\include\HAL\Digital.h:240</i> */
		public static final int kPreAndPostLatchPulse = 3;
	};
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String NULL_PARAMETER_MESSAGE = "A pointer parameter to a method is NULL";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String NO_AVAILABLE_RESOURCES_MESSAGE = "No available resources to allocate";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String INCOMPATIBLE_STATE_MESSAGE = "Incompatible State: The operation cannot be completed";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String ANALOG_TRIGGER_PULSE_OUTPUT_ERROR_MESSAGE = "Attempted to read AnalogTrigger pulse output.";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final int ANALOG_TRIGGER_LIMIT_ORDER_ERROR = -10;
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final int SPI_READ_NO_DATA = 14;
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String VOLTAGE_OUT_OF_RANGE_MESSAGE = "Voltage to convert to raw value is out of range [-10; 10]";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String ANALOG_TRIGGER_LIMIT_ORDER_ERROR_MESSAGE = "AnalogTrigger limits error.  Lower limit > Upper Limit";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final int SPI_WRITE_NO_MOSI = 12;
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String PARAMETER_OUT_OF_RANGE_MESSAGE = "A parameter is out of range.";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Task.h</i> */
	public static final int OK = 0;
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Task.h</i> */
	public static final int ERROR = (-1);
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String SAMPLE_RATE_TOO_HIGH_MESSAGE = "Analog module sample rate is too high";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String SPI_WRITE_NO_MOSI_MESSAGE = "Cannot write to SPI port with no MOSI output";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final int SPI_READ_NO_MISO = 13;
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String SPI_READ_NO_DATA_MESSAGE = "No data available to read from SPI";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String SPI_READ_NO_MISO_MESSAGE = "Cannot read from SPI port with no MISO input";
	/** <i>native declaration : AthenaJava\target\native\include\HAL\Errors.h</i> */
	public static final String LOOP_TIMING_ERROR_MESSAGE = "Digital module loop timing is not the expected value";
	/**
	 * Original signature : <code>void delayTicks(int32_t)</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\Utilities.h:366</i>
	 * @param ticks 
	 */
	public static native void delayTicks(int ticks);
	/**
	 * Original signature : <code>void delayMillis(double)</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\Utilities.h:368</i>
	 * @param ms 
	 */
	public static native void delayMillis(double ms);
	/**
	 * Original signature : <code>void delaySeconds(double)</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\Utilities.h:370</i>
	 * @param s 
	 */
	public static native void delaySeconds(double s);
	/**
	 * Original signature : <code>MUTEX_ID initializeMutex(uint32_t)</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:385</i>
	 * @param flags 
	 * @return 
	 */
	public static native ByteBuffer initializeMutex(int flags);
	/**
	 * Original signature : <code>void deleteMutex(MUTEX_ID)</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:387</i>
	 * @param sem 
	 */
	public static native void deleteMutex(ByteBuffer sem);
	/**
	 * Original signature : <code>int8_t takeMutex(MUTEX_ID, int32_t)</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\Semaphore.h:389</i>
	 * @param sem 
	 * @param timeout 
	 * @return 
	 */
	public static native byte takeMutex(ByteBuffer sem, int timeout);
	/**
	 * Original signature : <code>double testDouble(double)</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:462</i>
	 * @param param 
	 * @return 
	 */
	public static native double testDouble(double param);
	/**
	 * Original signature : <code>int32_t testInt32(int32_t)</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:464</i>
	 * @param param 
	 * @return 
	 */
	public static native int testInt32(int param);
	/**
	 * Original signature : <code>void NumericArrayResize()</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:470</i>
	 */
	public static native void NumericArrayResize();
	/**
	 * Original signature : <code>void RTSetCleanupProc()</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:472</i>
	 */
	public static native void RTSetCleanupProc();
	/**
	 * Original signature : <code>void EDVR_CreateReference()</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:474</i>
	 */
	public static native void EDVR_CreateReference();
	/**
	 * Original signature : <code>void Occur()</code><br>
	 * <i>native declaration : AthenaJava\target\native\include\HAL\HAL.h:476</i>
	 */
	public static native void Occur();
}
